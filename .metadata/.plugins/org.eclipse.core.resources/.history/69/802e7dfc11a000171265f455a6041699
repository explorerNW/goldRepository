package algorithms;

public class ShellSort {
	 9     public static void main(String []args){
	10         int []arr ={1,4,2,7,9,8,3,6};
	11         sort(arr);
	12         System.out.println(Arrays.toString(arr));
	13         int []arr1 ={1,4,2,7,9,8,3,6};
	14         sort1(arr1);
	15         System.out.println(Arrays.toString(arr1));
	16     }
	17 
	18     /**
	19      * 希尔排序 针对有序序列在插入时采用交换法
	20      * @param arr
	21      */
	22     public static void sort(int []arr){
	23         //增量gap，并逐步缩小增量
	24        for(int gap=arr.length/2;gap>0;gap/=2){
	25            //从第gap个元素，逐个对其所在组进行直接插入排序操作
	26            for(int i=gap;i<arr.length;i++){
	27                int j = i;
	28                while(j-gap>=0 && arr[j]<arr[j-gap]){
	29                    //插入排序采用交换法
	30                    swap(arr,j,j-gap);
	31                    j-=gap;
	32                }
	33            }
	34        }
	35     }
	36 
	37     /**
	38      * 希尔排序 针对有序序列在插入时采用移动法。
	39      * @param arr
	40      */
	41     public static void sort1(int []arr){
	42         //增量gap，并逐步缩小增量
	43         for(int gap=arr.length/2;gap>0;gap/=2){
	44             //从第gap个元素，逐个对其所在组进行直接插入排序操作
	45             for(int i=gap;i<arr.length;i++){
	46                 int j = i;
	47                 int temp = arr[j];
	48                 if(arr[j]<arr[j-gap]){
	49                     while(j-gap>=0 && temp<arr[j-gap]){
	50                         //移动法
	51                         arr[j] = arr[j-gap];
	52                         j-=gap;
	53                     }
	54                     arr[j] = temp;
	55                 }
	56             }
	57         }
	58     }
	59     /**
	60      * 交换数组元素
	61      * @param arr
	62      * @param a
	63      * @param b
	64      */
	65     public static void swap(int []arr,int a,int b){
	66         arr[a] = arr[a]+arr[b];
	67         arr[b] = arr[a]-arr[b];
	68         arr[a] = arr[a]-arr[b];
	69     }
	70 }